apiVersion: v1
kind: ServiceAccount
metadata:
  name: ai-agent-recruiter-sa
  namespace: ai-agent-recruiter
  labels:
    app: ai-agent-recruiter
    component: rbac
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/ai-agent-recruiter-role
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ai-agent-recruiter-sa
  namespace: ai-agent-recruiter-staging
  labels:
    app: ai-agent-recruiter
    component: rbac
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/ai-agent-recruiter-staging-role
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ai-agent-recruiter-sa
  namespace: ai-agent-recruiter-dev
  labels:
    app: ai-agent-recruiter
    component: rbac
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/ai-agent-recruiter-dev-role
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ai-agent-recruiter-role
  namespace: ai-agent-recruiter
  labels:
    app: ai-agent-recruiter
    component: rbac
rules:
# Allow reading ConfigMaps and Secrets
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
# Allow reading Services and Endpoints
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list"]
# Allow reading Pods for health checks
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
# Allow reading PersistentVolumes and PersistentVolumeClaims
- apiGroups: [""]
  resources: ["persistentvolumes", "persistentvolumeclaims"]
  verbs: ["get", "list"]
# Allow access to metrics
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ai-agent-recruiter-role
  namespace: ai-agent-recruiter-staging
  labels:
    app: ai-agent-recruiter
    component: rbac
rules:
# Allow reading ConfigMaps and Secrets
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
# Allow reading Services and Endpoints
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list"]
# Allow reading Pods for health checks
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
# Allow reading PersistentVolumes and PersistentVolumeClaims
- apiGroups: [""]
  resources: ["persistentvolumes", "persistentvolumeclaims"]
  verbs: ["get", "list"]
# Allow access to metrics
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ai-agent-recruiter-role
  namespace: ai-agent-recruiter-dev
  labels:
    app: ai-agent-recruiter
    component: rbac
rules:
# Allow reading ConfigMaps and Secrets
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
# Allow reading Services and Endpoints
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list"]
# Allow reading Pods for health checks
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
# Allow reading PersistentVolumes and PersistentVolumeClaims
- apiGroups: [""]
  resources: ["persistentvolumes", "persistentvolumeclaims"]
  verbs: ["get", "list"]
# Allow access to metrics
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
# Additional permissions for development
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ai-agent-recruiter-rolebinding
  namespace: ai-agent-recruiter
  labels:
    app: ai-agent-recruiter
    component: rbac
subjects:
- kind: ServiceAccount
  name: ai-agent-recruiter-sa
  namespace: ai-agent-recruiter
roleRef:
  kind: Role
  name: ai-agent-recruiter-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ai-agent-recruiter-rolebinding
  namespace: ai-agent-recruiter-staging
  labels:
    app: ai-agent-recruiter
    component: rbac
subjects:
- kind: ServiceAccount
  name: ai-agent-recruiter-sa
  namespace: ai-agent-recruiter-staging
roleRef:
  kind: Role
  name: ai-agent-recruiter-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ai-agent-recruiter-rolebinding
  namespace: ai-agent-recruiter-dev
  labels:
    app: ai-agent-recruiter
    component: rbac
subjects:
- kind: ServiceAccount
  name: ai-agent-recruiter-sa
  namespace: ai-agent-recruiter-dev
roleRef:
  kind: Role
  name: ai-agent-recruiter-role
  apiGroup: rbac.authorization.k8s.io
---
# Network Policy for Production
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ai-agent-recruiter-netpol
  namespace: ai-agent-recruiter
  labels:
    app: ai-agent-recruiter
    component: network-policy
spec:
  podSelector:
    matchLabels:
      app: ai-agent-recruiter
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from ALB
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 3000
  # Allow ingress from same namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: ai-agent-recruiter
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
  egress:
  # Allow egress to internet (for API calls)
  - to: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  # Allow egress to DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow egress within namespace
  - to:
    - namespaceSelector:
        matchLabels:
          name: ai-agent-recruiter
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
---
# Pod Security Policy
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: ai-agent-recruiter-psp
  labels:
    app: ai-agent-recruiter
    component: security
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: true